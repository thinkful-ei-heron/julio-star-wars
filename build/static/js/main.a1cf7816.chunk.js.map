{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Results/Results.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","onSubmit","e","props","getData","className","id","type","placeholder","required","value","Component","Results","this","results","length","map","item","key","name","title","birth_year","gender","hair_color","Header","App","preventDefault","params","document","getElementById","fetch","method","headers","then","setState","loading","res","ok","Error","statusText","json","data","catch","error","state","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SA4BeA,G,MAzBf,iLACY,IAAD,OACP,OACE,oCACE,0BAAMC,SAAU,SAACC,GAAD,OAAO,EAAKC,MAAMC,QAAQF,IAAIG,UAAU,aACtD,2BACEC,GAAG,cACHC,KAAK,OACLC,YAAY,gBACZC,UAAQ,IAEV,4BAAQH,GAAG,iBACT,4BAAQI,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,YAEF,4BAAQH,KAAK,UAAb,gBAnBV,GAA+BI,cCgChBC,G,MAhCf,iLAEI,OACE,6BAASP,UAAU,qBACjB,oCACGQ,KAAKV,MAAMW,QAAQC,OAAS,EAC3B,4CAEAF,KAAKV,MAAMW,QAAQE,KAAI,SAACC,GAAD,OACrB,yBACEC,IAAKD,EAAKE,KAAOF,EAAKE,KAAOF,EAAKG,MAClCf,UAAU,mBAEV,2BACGY,EAAKE,KAAL,iBAAsBF,EAAKE,MAA3B,kBAA+CF,EAAKG,QAEvD,2BACGH,EAAKI,WAAL,uBAAkCJ,EAAKI,YAAe,IAEzD,2BAAIJ,EAAKK,OAAL,gBAAuBL,EAAKK,QAAW,IAC3C,2BACGL,EAAKM,WAAL,uBAAkCN,EAAKM,YAAe,cArBzE,GAA6BZ,cCSda,G,MAVf,iLAEI,OACE,gCACE,8DAJR,GAA4Bb,cC8Cbc,EA3Cf,YACE,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,QAAU,SAACF,GACTA,EAAEwB,iBACF,IACIC,EAAM,iBAAaC,SAASC,eAAe,eAAenB,OAC1DH,EAAOqB,SAASC,eAAe,iBAAiBnB,MAAQ,KAC5DoB,MAHgB,wBAGAvB,EAAOoB,EAAQ,CAC7BI,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAE1BC,KAAK,EAAKC,SAAS,CAAEC,SAAS,KAC9BF,MAAK,SAACG,GACL,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAMF,EAAIG,YAEtB,OAAOH,EAAII,UAEZP,MAAK,SAACQ,GAAD,OAAU,EAAKP,SAAS,CAAEpB,QAAS2B,EAAK3B,QAASqB,SAAS,OAC/DO,OAAM,SAACC,GAAD,OAAW,EAAKT,SAAS,CAAES,cAvBpC,EAAKC,MAAQ,CACX9B,QAAS,GACTqB,SAAS,EACTQ,MAAO,MALQ,EADrB,sEA6BI,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWvC,QAASS,KAAKT,UACxBS,KAAK+B,MAAMT,QACV,yBAAK9B,UAAU,kBAEf,kBAAC,EAAD,CAASS,QAASD,KAAK+B,MAAM9B,eApCvC,GAAyBH,aCOLkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASC,eAAe,SD2H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.a1cf7816.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends Component {\n  render() {\n    return (\n      <>\n        <form onSubmit={(e) => this.props.getData(e)} className='main-form'>\n          <input\n            id='main-search'\n            type='text'\n            placeholder='Name or Title'\n            required\n          ></input>\n          <select id='type-selector'>\n            <option value='people'>People</option>\n            <option value='films'>Films</option>\n            <option value='starships'>Starships</option>\n            <option value='vehicles'>Vehicles</option>\n            <option value='species'>Species</option>\n            <option value='planets'>Planets</option>\n          </select>\n          <button type='submit'>Search</button>\n        </form>\n      </>\n    );\n  }\n}\nexport default SearchBar;\n","import React, { Component } from 'react';\nimport './Results.css';\n\nexport class Results extends Component {\n  render() {\n    return (\n      <section className='results-container'>\n        <>\n          {this.props.results.length < 1 ? (\n            <p>Nothing Found</p>\n          ) : (\n            this.props.results.map((item) => (\n              <div\n                key={item.name ? item.name : item.title}\n                className='items-container'\n              >\n                <p>\n                  {item.name ? `Name : ${item.name}` : `Title : ${item.title}`}\n                </p>\n                <p>\n                  {item.birth_year ? `Birth Year : ${item.birth_year}` : ''}\n                </p>\n                <p>{item.gender ? `Sex : ${item.gender}` : ''}</p>\n                <p>\n                  {item.hair_color ? `Hair Color : ${item.hair_color}` : ''}\n                </p>\n              </div>\n            ))\n          )}\n        </>\n      </section>\n    );\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport './Header.css';\nexport class Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Star Wars Searcher 9000.1</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport Results from './components/Results/Results';\nimport Header from './components/Header/Header';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      loading: false,\n      error: null,\n    };\n  }\n  getData = (e) => {\n    e.preventDefault();\n    const baseURL = 'https://swapi.co/api/';\n    let params = `search=${document.getElementById('main-search').value}`;\n    let type = document.getElementById('type-selector').value + '/?';\n    fetch(baseURL + type + params, {\n      method: 'GET',\n      headers: { 'content-type': 'application/json' },\n    })\n      .then(this.setState({ loading: true }))\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        return res.json();\n      })\n      .then((data) => this.setState({ results: data.results, loading: false }))\n      .catch((error) => this.setState({ error }));\n  };\n  render() {\n    return (\n      <>\n        <Header />\n        <SearchBar getData={this.getData} />\n        {this.state.loading ? (\n          <div className='lds-dual-ring'></div>\n        ) : (\n          <Results results={this.state.results} />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}